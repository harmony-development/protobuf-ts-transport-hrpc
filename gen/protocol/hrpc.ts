// @generated by protobuf-ts 2.0.7 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "protocol/hrpc.proto" (package "hrpc.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Error type that will be returned by servers.
 *
 * @generated from protobuf message hrpc.v1.Error
 */
export interface Error {
    /**
     * The identifier of this error, can be used as an i18n key.
     *
     * @generated from protobuf field: string identifier = 1;
     */
    identifier: string;
    /**
     * A (usually english) human message for this error.
     *
     * @generated from protobuf field: string human_message = 2;
     */
    humanMessage: string;
    /**
     * More details about this message. Is dependent on the endpoint.
     *
     * @generated from protobuf field: bytes more_details = 3;
     */
    moreDetails: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class Error$Type extends MessageType<Error> {
    constructor() {
        super("hrpc.v1.Error", [
            { no: 1, name: "identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "human_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "more_details", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Error>): Error {
        const message = { identifier: "", humanMessage: "", moreDetails: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Error>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Error): Error {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string identifier */ 1:
                    message.identifier = reader.string();
                    break;
                case /* string human_message */ 2:
                    message.humanMessage = reader.string();
                    break;
                case /* bytes more_details */ 3:
                    message.moreDetails = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string identifier = 1; */
        if (message.identifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.identifier);
        /* string human_message = 2; */
        if (message.humanMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.humanMessage);
        /* bytes more_details = 3; */
        if (message.moreDetails.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.moreDetails);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hrpc.v1.Error
 */
export const Error = new Error$Type();
